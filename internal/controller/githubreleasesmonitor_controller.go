/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"time"

	"github.com/google/go-github/v50/github"
	"golang.org/x/oauth2"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	cveoperatorv1 "cyse7125-su24-team04/cve-operator/api/v1"
)

// GitHubReleasesMonitorReconciler reconciles a GitHubReleasesMonitor object
type GitHubReleasesMonitorReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleasesmonitors,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleasesmonitors/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleasesmonitors/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleasesMonitorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// Fetch the GitHubReleasesMonitor instance
	var monitor cveoperatorv1.GitHubReleasesMonitor
	if err := r.Get(ctx, req.NamespacedName, &monitor); err != nil {
		log.Error(err, "unable to fetch GitHubReleasesMonitor")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Setup GitHub client
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: "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"}, // Replace with your GitHub token
	)
	tc := oauth2.NewClient(ctx, ts)
	client := github.NewClient(tc)

	// Fetch the latest releases
	releases, _, err := client.Repositories.ListReleases(ctx, "CVEProject", "cvelistV5", nil) // Replace with your repo details
	if err != nil {
		log.Error(err, "unable to fetch GitHub releases")
		return ctrl.Result{}, err
	}

	for _, release := range releases {
		for _, asset := range release.Assets {
			if asset.GetName() == "delta" {
				url := asset.GetBrowserDownloadURL()

				// Create or update GitHubRelease CR
				releaseName := fmt.Sprintf("release-%d", asset.GetID())
				gitHubRelease := &cveoperatorv1.GitHubRelease{}
				err := r.Get(ctx, types.NamespacedName{Namespace: req.Namespace, Name: releaseName}, gitHubRelease)
				if err != nil {
					// Create a new GitHubRelease
					gitHubRelease = &cveoperatorv1.GitHubRelease{
						ObjectMeta: metav1.ObjectMeta{
							Name:      releaseName,
							Namespace: req.Namespace,
						},
						Spec: cveoperatorv1.GitHubReleaseSpec{
							URL: url,
						},
					}
					if err := ctrl.SetControllerReference(&monitor, gitHubRelease, r.Scheme); err != nil {
						log.Error(err, "unable to set owner reference on new GitHubRelease")
						return ctrl.Result{}, err
					}
					if err := r.Create(ctx, gitHubRelease); err != nil {
						log.Error(err, "unable to create GitHubRelease")
						return ctrl.Result{}, err
					}
				} else {
					// Update the existing GitHubRelease if necessary
					updated := false
					if gitHubRelease.Spec.URL != url {
						gitHubRelease.Spec.URL = url
						updated = true
					}
					if updated {
						if err := r.Update(ctx, gitHubRelease); err != nil {
							log.Error(err, "unable to update GitHubRelease")
							return ctrl.Result{}, err
						}
					}
				}
			}
		}
	}

	// Update the status with the current time
	monitor.Status.RetrievedAt = time.Now().Format(time.RFC3339)
	if err := r.Status().Update(ctx, &monitor); err != nil {
		log.Error(err, "unable to update GitHubReleasesMonitor status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{RequeueAfter: 1 * time.Hour}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleasesMonitorReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cveoperatorv1.GitHubReleasesMonitor{}).
		Complete(r)
}
