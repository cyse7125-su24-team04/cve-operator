/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"net/http"
	"time"

	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	cveoperatorv1 "cyse7125-su24-team04/cve-operator/api/v1"
)

// GitHubReleasesMonitorReconciler reconciles a GitHubReleasesMonitor object
type GitHubReleasesMonitorReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleasesmonitors,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleasesmonitors/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleasesmonitors/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleasesMonitorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// Log the request details
	log.Info("Reconciling GitHubReleasesMonitor", "namespace", req.Namespace, "name", req.Name)

	// Fetch the GitHubReleasesMonitor instance
	var monitor cveoperatorv1.GitHubReleasesMonitor
	if err := r.Get(ctx, req.NamespacedName, &monitor); err != nil {
		log.Error(err, "unable to fetch GitHubReleasesMonitor", "namespace", req.Namespace, "name", req.Name)
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	log.Info("Successfully fetched GitHubReleasesMonitor", "monitor", monitor)

	monitorfrom := monitor.Spec.MonitorFrom

	inputDate, err := time.Parse("2006-01-02", monitorfrom)
	if err != nil {
		log.Error(err, "unable to parse MonitorFrom date", "MonitorFrom", monitorfrom)
		return ctrl.Result{}, err
	}

	currentDate := time.Now().UTC()

	daysBetween := int(currentDate.Sub(inputDate).Hours() / 24)

	for i := 0; i < daysBetween; i++ {
		currentDate := inputDate.AddDate(0, 0, i)
		dateStr := currentDate.Format("2006-01-02")

		// Construct the release URL
		releaseURL := fmt.Sprintf("%s/download/cve_%s_at_end_of_day/%s_delta_CVEs_at_end_of_day.zip", monitor.Spec.URL, dateStr, dateStr)
		log.Info("Checking release URL", "releaseURL", releaseURL)

		// Check if the URL exists by making a HEAD request
		resp, err := http.Head(releaseURL)
		if err != nil || resp.StatusCode != http.StatusOK {
			if err != nil {
				log.Error(err, "error making HEAD request", "releaseURL", releaseURL)
			} else {
				log.Info("HEAD request failed", "status", resp.StatusCode, "releaseURL", releaseURL)
			}
			continue // Skip to the next date if the current URL is not valid
		}

		log.Info("Release found", "releaseURL", releaseURL)

		// Create the GitHubRelease resource
		releaseName := fmt.Sprintf("release-%s", dateStr)
		gitHubRelease := &cveoperatorv1.GitHubRelease{}
		err = r.Get(ctx, types.NamespacedName{Namespace: req.Namespace, Name: releaseName}, gitHubRelease)
		if err != nil {
			if apierrors.IsNotFound(err) {
				// Create a new GitHubRelease
				gitHubRelease = &cveoperatorv1.GitHubRelease{
					ObjectMeta: metav1.ObjectMeta{
						Name:       releaseName,
						Namespace:  req.Namespace,
						Finalizers: []string{"githubrelease.finalizers.cve-operator.csye7125.me"},
					},
					Spec: cveoperatorv1.GitHubReleaseSpec{
						URL: releaseURL,
					},
				}
				if err := ctrl.SetControllerReference(&monitor, gitHubRelease, r.Scheme); err != nil {
					log.Error(err, "unable to set owner reference on new GitHubRelease")
					return ctrl.Result{}, err
				}
				if err := r.Create(ctx, gitHubRelease); err != nil {
					log.Error(err, "unable to create GitHubRelease")
					return ctrl.Result{}, err
				}
				log.Info("Created new GitHubRelease", "namespace", req.Namespace, "name", releaseName)
			} else {
				log.Error(err, "unable to fetch GitHubRelease")
				return ctrl.Result{}, err
			}
		} else {
			// Update the existing GitHubRelease if necessary
			updated := false
			if gitHubRelease.Spec.URL != releaseURL {
				gitHubRelease.Spec.URL = releaseURL
				updated = true
			}
			if updated {
				if err := r.Update(ctx, gitHubRelease); err != nil {
					log.Error(err, "unable to update GitHubRelease")
					return ctrl.Result{}, err
				}
				log.Info("Updated GitHubRelease", "namespace", req.Namespace, "name", releaseName)
			}
		}
	}

	// Update the status with the current time
	monitor.Status.RetrievedAt = time.Now().Format(time.RFC3339)
	if err := r.Status().Update(ctx, &monitor); err != nil {
		log.Error(err, "unable to update GitHubReleasesMonitor status")
		return ctrl.Result{}, err
	}

	log.Info("Successfully updated GitHubReleasesMonitor status", "namespace", req.Namespace, "name", req.Name)
	return ctrl.Result{RequeueAfter: 10 * time.Second}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleasesMonitorReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cveoperatorv1.GitHubReleasesMonitor{}).
		Complete(r)
}
