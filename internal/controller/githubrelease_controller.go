/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"time"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	cveoperatorv1 "cyse7125-su24-team04/cve-operator/api/v1"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GitHubReleaseReconciler reconciles a GitHubRelease object
type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
	Log    logr.Logger
}

// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleases/finalizers,verbs=update

func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error) {
	log := r.Log.WithValues("githubrelease", req.NamespacedName)

	// Fetch the GitHubRelease instance
	var githubRelease cveoperatorv1.GitHubRelease
	if err := r.Get(ctx, req.NamespacedName, &githubRelease); err != nil {
		if errors.IsNotFound(err) {
			// Object not found, return. Created objects are automatically garbage collected.
			return reconcile.Result{}, nil
		}
		log.Error(err, "unable to fetch GitHubRelease")
		return reconcile.Result{}, err
	}

	// If GitHubRelease has a finalizer, handle cleanup
	if controllerutil.ContainsFinalizer(&githubRelease, "githubrelease.finalizers.cve-operator.csye7125.me") {
		// Perform finalizer logic here
		// If cleanup is done, remove the finalizer
		if err := r.removeFinalizer(ctx, &githubRelease); err != nil {
			log.Error(err, "unable to remove finalizer")
			return reconcile.Result{}, err
		}
	}

	// Check if the Job already exists
	var job batchv1.Job
	err := r.Get(ctx, client.ObjectKey{Name: githubRelease.Name, Namespace: req.Namespace}, &job)
	if err != nil && errors.IsNotFound(err) {
		// Create a Job
		job := r.jobForGitHubRelease(&githubRelease)
		if err := r.Create(ctx, job); err != nil {
			log.Error(err, "unable to create Job for GitHubRelease")
			return reconcile.Result{}, err
		}
		log.Info("Created Job for GitHubRelease", "Job", job.Name)
	} else if err != nil {
		log.Error(err, "unable to fetch Job")
		return reconcile.Result{}, err
	}

	// Check Job status and handle retries
	if job.Status.Succeeded > 0 {
		// Job succeeded, remove the finalizer
		if err := r.removeFinalizer(ctx, &githubRelease); err != nil {
			log.Error(err, "unable to remove finalizer")
			return reconcile.Result{}, err
		}
	}

	// Requeue after some delay
	return reconcile.Result{RequeueAfter: 10 * time.Minute}, nil
}

func (r *GitHubReleaseReconciler) jobForGitHubRelease(gitHubRelease *cveoperatorv1.GitHubRelease) *batchv1.Job {
	labels := map[string]string{
		"app": gitHubRelease.Name,
	}

	return &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      gitHubRelease.Name,
			Namespace: gitHubRelease.Namespace,
			Labels:    labels,
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: labels,
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "cve-processor",
							Image: "vamsidharp/webapp-cve-processor:v4",
							Args:  []string{gitHubRelease.Spec.URL},
						},
					},
					RestartPolicy: corev1.RestartPolicyOnFailure,
				},
			},
		},
	}
}

func (r *GitHubReleaseReconciler) removeFinalizer(ctx context.Context, githubRelease *cveoperatorv1.GitHubRelease) error {
	controllerutil.RemoveFinalizer(githubRelease, "githubrelease.finalizers.cve-operator.csye7125.me")
	return r.Update(ctx, githubRelease)
}

func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cveoperatorv1.GitHubRelease{}).
		Complete(r)
}
