/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"time"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	cveoperatorv1 "cyse7125-su24-team04/cve-operator/api/v1"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	gitHubReleaseFinalizer = "githubrelease.finalizers.cve-operator.csye7125.me"
)

// GitHubReleaseReconciler reconciles a GitHubRelease object
type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
	Log    logr.Logger
}

// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cve-operator.csye7125.me,resources=githubreleases/finalizers,verbs=update

func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error) {
	log := r.Log.WithValues("githubrelease", req.NamespacedName)

	// Fetch the GitHubRelease instance
	var githubRelease cveoperatorv1.GitHubRelease
	if err := r.Get(ctx, req.NamespacedName, &githubRelease); err != nil {
		if errors.IsNotFound(err) {
			// Object not found, return. Created objects are automatically garbage collected.
			return reconcile.Result{}, nil
		}
		log.Error(err, "unable to fetch GitHubRelease")
		return reconcile.Result{}, err
	}

	// Add finalizer if not present and the object is not being deleted
	if githubRelease.ObjectMeta.DeletionTimestamp.IsZero() {
		if !controllerutil.ContainsFinalizer(&githubRelease, gitHubReleaseFinalizer) {
			controllerutil.AddFinalizer(&githubRelease, gitHubReleaseFinalizer)
			if err := r.Update(ctx, &githubRelease); err != nil {
				log.Error(err, "unable to add finalizer")
				return reconcile.Result{}, err
			}
		}
	} else {
		// Handle deletion
		if controllerutil.ContainsFinalizer(&githubRelease, gitHubReleaseFinalizer) {
			// Perform cleanup logic here
			if err := r.cleanupResources(ctx, &githubRelease); err != nil {
				log.Error(err, "unable to cleanup resources")
				return reconcile.Result{}, err
			}
			// Remove the finalizer and update the object
			controllerutil.RemoveFinalizer(&githubRelease, gitHubReleaseFinalizer)
			if err := r.Update(ctx, &githubRelease); err != nil {
				log.Error(err, "unable to remove finalizer")
				return reconcile.Result{}, err
			}
			return reconcile.Result{}, nil
		}
	}

	// Check if any existing Job is in a running or pending state
	jobList := &batchv1.JobList{}
	listOpts := []client.ListOption{
		client.InNamespace(githubRelease.Namespace),
		client.MatchingLabels{"app": githubRelease.Name},
	}
	if err := r.List(ctx, jobList, listOpts...); err != nil {
		log.Error(err, "unable to list Jobs")
		return reconcile.Result{}, err
	}

	// Check the status of existing jobs
	jobExists := false
	for _, job := range jobList.Items {
		if job.Status.Active > 0 || job.Status.Failed > 0 || job.Status.Succeeded > 0 {
			jobExists = true
			break
		}
	}

	if !jobExists {
		// Create a new Job if none of the existing jobs are active or failed
		job := r.jobForGitHubRelease(&githubRelease)
		if err := r.Create(ctx, job); err != nil {
			log.Error(err, "unable to create Job for GitHubRelease")
			return reconcile.Result{}, err
		}
		log.Info("Created Job for GitHubRelease", "Job", job.Name)
	}

	// Requeue after some delay
	return reconcile.Result{RequeueAfter: 1 * time.Hour}, nil
}

func (r *GitHubReleaseReconciler) jobForGitHubRelease(gitHubRelease *cveoperatorv1.GitHubRelease) *batchv1.Job {
	labels := map[string]string{
		"app": gitHubRelease.Name,
	}

	cveListURL := gitHubRelease.Spec.URL

	return &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      gitHubRelease.Name,
			Namespace: gitHubRelease.Namespace,
			Labels:    labels,
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: labels,
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "cve-processor",
							Image: "vamsidharp/webapp-cve-processor:v7",
							Args:  []string{cveListURL},
							Env: []corev1.EnvVar{
								{
									Name:  "KAFKA_BROKER",
									Value: "kafka.kafka.svc.cluster.local:9092",
								},
								{
									Name:  "KAFKA_TOPIC",
									Value: "cve",
								},
								{
									Name:  "CVE_LIST_URL",
									Value: cveListURL,
								},
							},
						},
					},
					RestartPolicy: corev1.RestartPolicyOnFailure,
				},
			},
		},
	}
}

func (r *GitHubReleaseReconciler) cleanupResources(ctx context.Context, githubRelease *cveoperatorv1.GitHubRelease) error {
	// Perform cleanup logic here
	log := r.Log.WithValues("githubrelease", githubRelease.Name)

	// Delete associated Jobs
	jobList := &batchv1.JobList{}
	listOpts := []client.ListOption{
		client.InNamespace(githubRelease.Namespace),
		client.MatchingLabels{"app": githubRelease.Name},
	}
	if err := r.List(ctx, jobList, listOpts...); err != nil {
		log.Error(err, "unable to list Jobs")
		return err
	}

	for _, job := range jobList.Items {
		log.Info("Deleting Job", "Job", job.Name)
		if err := r.Delete(ctx, &job); err != nil {
			log.Error(err, "unable to delete Job", "Job", job.Name)
			return err
		}
	}

	return nil
}

func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cveoperatorv1.GitHubRelease{}).
		Complete(r)
}
